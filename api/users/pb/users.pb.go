// Code generated by protoc-gen-go. DO NOT EDIT.
// source: users.proto

package users_pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ListThreadsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListThreadsRequest) Reset()         { *m = ListThreadsRequest{} }
func (m *ListThreadsRequest) String() string { return proto.CompactTextString(m) }
func (*ListThreadsRequest) ProtoMessage()    {}
func (*ListThreadsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{0}
}

func (m *ListThreadsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListThreadsRequest.Unmarshal(m, b)
}
func (m *ListThreadsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListThreadsRequest.Marshal(b, m, deterministic)
}
func (m *ListThreadsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListThreadsRequest.Merge(m, src)
}
func (m *ListThreadsRequest) XXX_Size() int {
	return xxx_messageInfo_ListThreadsRequest.Size(m)
}
func (m *ListThreadsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListThreadsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListThreadsRequest proto.InternalMessageInfo

type ListThreadsReply struct {
	List                 []*ListThreadsReply_Thread `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ListThreadsReply) Reset()         { *m = ListThreadsReply{} }
func (m *ListThreadsReply) String() string { return proto.CompactTextString(m) }
func (*ListThreadsReply) ProtoMessage()    {}
func (*ListThreadsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{1}
}

func (m *ListThreadsReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListThreadsReply.Unmarshal(m, b)
}
func (m *ListThreadsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListThreadsReply.Marshal(b, m, deterministic)
}
func (m *ListThreadsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListThreadsReply.Merge(m, src)
}
func (m *ListThreadsReply) XXX_Size() int {
	return xxx_messageInfo_ListThreadsReply.Size(m)
}
func (m *ListThreadsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListThreadsReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListThreadsReply proto.InternalMessageInfo

func (m *ListThreadsReply) GetList() []*ListThreadsReply_Thread {
	if m != nil {
		return m.List
	}
	return nil
}

type ListThreadsReply_Thread struct {
	ID                   []byte   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListThreadsReply_Thread) Reset()         { *m = ListThreadsReply_Thread{} }
func (m *ListThreadsReply_Thread) String() string { return proto.CompactTextString(m) }
func (*ListThreadsReply_Thread) ProtoMessage()    {}
func (*ListThreadsReply_Thread) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{1, 0}
}

func (m *ListThreadsReply_Thread) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListThreadsReply_Thread.Unmarshal(m, b)
}
func (m *ListThreadsReply_Thread) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListThreadsReply_Thread.Marshal(b, m, deterministic)
}
func (m *ListThreadsReply_Thread) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListThreadsReply_Thread.Merge(m, src)
}
func (m *ListThreadsReply_Thread) XXX_Size() int {
	return xxx_messageInfo_ListThreadsReply_Thread.Size(m)
}
func (m *ListThreadsReply_Thread) XXX_DiscardUnknown() {
	xxx_messageInfo_ListThreadsReply_Thread.DiscardUnknown(m)
}

var xxx_messageInfo_ListThreadsReply_Thread proto.InternalMessageInfo

func (m *ListThreadsReply_Thread) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *ListThreadsReply_Thread) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*ListThreadsRequest)(nil), "users.pb.ListThreadsRequest")
	proto.RegisterType((*ListThreadsReply)(nil), "users.pb.ListThreadsReply")
	proto.RegisterType((*ListThreadsReply_Thread)(nil), "users.pb.ListThreadsReply.Thread")
}

func init() { proto.RegisterFile("users.proto", fileDescriptor_030765f334c86cea) }

var fileDescriptor_030765f334c86cea = []byte{
	// 215 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x2d, 0x4e, 0x2d,
	0x2a, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0x72, 0x92, 0x94, 0x44, 0xb8, 0x84,
	0x7c, 0x32, 0x8b, 0x4b, 0x42, 0x32, 0x8a, 0x52, 0x13, 0x53, 0x8a, 0x83, 0x52, 0x0b, 0x4b, 0x53,
	0x8b, 0x4b, 0x94, 0xca, 0xb9, 0x04, 0x50, 0x44, 0x0b, 0x72, 0x2a, 0x85, 0x4c, 0xb9, 0x58, 0x72,
	0x32, 0x8b, 0x4b, 0x24, 0x18, 0x15, 0x98, 0x35, 0xb8, 0x8d, 0x14, 0xf5, 0x60, 0x46, 0xe8, 0xa1,
	0xab, 0xd4, 0x83, 0x70, 0x82, 0xc0, 0xca, 0xa5, 0x74, 0xb8, 0xd8, 0x20, 0x7c, 0x21, 0x3e, 0x2e,
	0x26, 0x4f, 0x17, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x9e, 0x20, 0x26, 0x4f, 0x17, 0x21, 0x21, 0x2e,
	0x96, 0xbc, 0xc4, 0xdc, 0x54, 0x09, 0x26, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x30, 0xdb, 0x28, 0x80,
	0x8b, 0xd9, 0x31, 0xc0, 0x53, 0xc8, 0x93, 0x8b, 0x1b, 0xc9, 0x54, 0x21, 0x19, 0x1c, 0x96, 0x81,
	0x1d, 0x2b, 0x25, 0x85, 0xdb, 0x29, 0x4a, 0x0c, 0x4e, 0x26, 0x5c, 0xa2, 0x99, 0xf9, 0x7a, 0x25,
	0xa9, 0x15, 0x25, 0x99, 0x39, 0xa9, 0x10, 0x95, 0xf1, 0xe9, 0x45, 0x05, 0xc9, 0x4e, 0x3c, 0x21,
	0x10, 0xb1, 0x50, 0x90, 0x50, 0x00, 0xe3, 0x22, 0x26, 0xae, 0x90, 0x88, 0x10, 0x9f, 0xf8, 0xd0,
	0x60, 0xd7, 0xa0, 0xe0, 0x24, 0x36, 0x70, 0x38, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb0,
	0x6e, 0x13, 0x8b, 0x36, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIClient interface {
	ListThreads(ctx context.Context, in *ListThreadsRequest, opts ...grpc.CallOption) (*ListThreadsReply, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) ListThreads(ctx context.Context, in *ListThreadsRequest, opts ...grpc.CallOption) (*ListThreadsReply, error) {
	out := new(ListThreadsReply)
	err := c.cc.Invoke(ctx, "/users.pb.API/ListThreads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
type APIServer interface {
	ListThreads(context.Context, *ListThreadsRequest) (*ListThreadsReply, error)
}

// UnimplementedAPIServer can be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (*UnimplementedAPIServer) ListThreads(ctx context.Context, req *ListThreadsRequest) (*ListThreadsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListThreads not implemented")
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_ListThreads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListThreadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListThreads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.pb.API/ListThreads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListThreads(ctx, req.(*ListThreadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "users.pb.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListThreads",
			Handler:    _API_ListThreads_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "users.proto",
}
