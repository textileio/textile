// Code generated by mockery 2.7.4. DO NOT EDIT.

package interfaces

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	pb "github.com/textileio/textile/v2/api/sendfild/pb"

	time "time"
)

// MockTxnStore is an autogenerated mock type for the TxnStore type
type MockTxnStore struct {
	mock.Mock
}

// Activate provides a mock function with given fields: ctx, knownCid, latestCid
func (_m *MockTxnStore) Activate(ctx context.Context, knownCid string, latestCid string) error {
	ret := _m.Called(ctx, knownCid, latestCid)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, knownCid, latestCid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *MockTxnStore) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fail provides a mock function with given fields: ctx, messageCid, failureMsg
func (_m *MockTxnStore) Fail(ctx context.Context, messageCid string, failureMsg string) error {
	ret := _m.Called(ctx, messageCid, failureMsg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, messageCid, failureMsg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, messageCid
func (_m *MockTxnStore) Get(ctx context.Context, messageCid string) (*pb.Txn, error) {
	ret := _m.Called(ctx, messageCid)

	var r0 *pb.Txn
	if rf, ok := ret.Get(0).(func(context.Context, string) *pb.Txn); ok {
		r0 = rf(ctx, messageCid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Txn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, messageCid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPending provides a mock function with given fields: ctx, excludeAlreadyWaiting
func (_m *MockTxnStore) GetAllPending(ctx context.Context, excludeAlreadyWaiting bool) ([]*pb.Txn, error) {
	ret := _m.Called(ctx, excludeAlreadyWaiting)

	var r0 []*pb.Txn
	if rf, ok := ret.Get(0).(func(context.Context, bool) []*pb.Txn); ok {
		r0 = rf(ctx, excludeAlreadyWaiting)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pb.Txn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = rf(ctx, excludeAlreadyWaiting)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, req
func (_m *MockTxnStore) List(ctx context.Context, req *pb.ListTxnsRequest) ([]*pb.Txn, error) {
	ret := _m.Called(ctx, req)

	var r0 []*pb.Txn
	if rf, ok := ret.Get(0).(func(context.Context, *pb.ListTxnsRequest) []*pb.Txn); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pb.Txn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.ListTxnsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// New provides a mock function with given fields: ctx, messageCid, from, to, amountNanoFil
func (_m *MockTxnStore) New(ctx context.Context, messageCid string, from string, to string, amountNanoFil int64) (*pb.Txn, error) {
	ret := _m.Called(ctx, messageCid, from, to, amountNanoFil)

	var r0 *pb.Txn
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int64) *pb.Txn); ok {
		r0 = rf(ctx, messageCid, from, to, amountNanoFil)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Txn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, int64) error); ok {
		r1 = rf(ctx, messageCid, from, to, amountNanoFil)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetWaiting provides a mock function with given fields: ctx, messageCid, waiting
func (_m *MockTxnStore) SetWaiting(ctx context.Context, messageCid string, waiting bool) error {
	ret := _m.Called(ctx, messageCid, waiting)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(ctx, messageCid, waiting)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Summary provides a mock function with given fields: ctx, after, before
func (_m *MockTxnStore) Summary(ctx context.Context, after time.Time, before time.Time) (*pb.SummaryResponse, error) {
	ret := _m.Called(ctx, after, before)

	var r0 *pb.SummaryResponse
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) *pb.SummaryResponse); ok {
		r0 = rf(ctx, after, before)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.SummaryResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(ctx, after, before)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
