syntax = "proto3";
package api.billingd.pb;
option go_package = "github.com/textileio/textile/v2/api/billingd/pb";

message Period {
    int64 unix_start = 1;
    int64 unix_end = 2;
}

message Usage {
    string description = 1;
    int64 units = 2;
    int64 total = 3;
    int64 free = 4;
    double cost = 5;
}

message CheckHealthRequest {}

message CheckHealthResponse {}

message CreateCustomerRequest {
    string key = 1;
    string parent_key = 2;
    string email = 3;
}

message CreateCustomerResponse {
    string customer_id = 1;
}

message GetCustomerRequest {
    string key = 1;
}

message GetCustomerResponse {
    string key = 1;
    string customer_id = 2;
    string parent_key = 3;
    string email = 4;
    string account_status = 5;
    string subscription_status = 6;
    int64 balance = 7;
    bool billable = 8;
    bool delinquent = 9;
    int64 created_at = 10;
    int64 grace_period_end = 11;

    Period invoice_period = 12;

    map<string, Usage> daily_usage = 13;

    int64 dependents = 14;
}

message ListDependentCustomersRequest {
    string key = 1;
    int64 offset = 2;
    int64 limit = 3;
}

message ListDependentCustomersResponse {
    repeated GetCustomerResponse customers = 1;
    int64 next_offset = 2;
}

message GetCustomerSessionRequest {
    string key = 1;
}

message GetCustomerSessionResponse {
    string url = 1;
}

message UpdateCustomerRequest {
    string customer_id = 1;
    int64 balance = 2;
    bool billable = 3;
    bool delinquent = 4;
}

message UpdateCustomerResponse {}

message UpdateCustomerSubscriptionRequest {
    string customer_id = 1;
    string status = 2;
    Period invoice_period = 3;
}

message UpdateCustomerSubscriptionResponse {}

message RecreateCustomerSubscriptionRequest {
    string key = 1;
}

message RecreateCustomerSubscriptionResponse {}

message DeleteCustomerRequest {
    string key = 1;
}

message DeleteCustomerResponse {}

message IncCustomerUsageRequest {
    string key = 1;
    map<string, int64> product_usage = 2;
}

message IncCustomerUsageResponse {
    Period invoice_period = 1;
    map<string, Usage> daily_usage = 2;
}

service APIService {
    rpc CheckHealth(CheckHealthRequest) returns (CheckHealthResponse) {}
    rpc CreateCustomer(CreateCustomerRequest) returns (CreateCustomerResponse) {}
    rpc GetCustomer(GetCustomerRequest) returns (GetCustomerResponse) {}
    rpc ListDependentCustomers(ListDependentCustomersRequest) returns (ListDependentCustomersResponse) {}
    rpc GetCustomerSession(GetCustomerSessionRequest) returns (GetCustomerSessionResponse) {}
    rpc UpdateCustomer(UpdateCustomerRequest) returns (UpdateCustomerResponse) {}
    rpc UpdateCustomerSubscription(UpdateCustomerSubscriptionRequest) returns (UpdateCustomerSubscriptionResponse) {}
    rpc RecreateCustomerSubscription(RecreateCustomerSubscriptionRequest) returns (RecreateCustomerSubscriptionResponse) {}
    rpc DeleteCustomer(DeleteCustomerRequest) returns (DeleteCustomerResponse) {}
    rpc IncCustomerUsage(IncCustomerUsageRequest) returns (IncCustomerUsageResponse) {}
}
