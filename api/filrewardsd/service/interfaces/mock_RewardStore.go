// Code generated by mockery 2.7.4. DO NOT EDIT.

package interfaces

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	pb "github.com/textileio/textile/v2/api/filrewardsd/pb"
)

// MockRewardStore is an autogenerated mock type for the RewardStore type
type MockRewardStore struct {
	mock.Mock
}

// All provides a mock function with given fields: ctx
func (_m *MockRewardStore) All(ctx context.Context) ([]*pb.Reward, error) {
	ret := _m.Called(ctx)

	var r0 []*pb.Reward
	if rf, ok := ret.Get(0).(func(context.Context) []*pb.Reward); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pb.Reward)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, req
func (_m *MockRewardStore) List(ctx context.Context, req *pb.ListRewardsRequest) ([]*pb.Reward, error) {
	ret := _m.Called(ctx, req)

	var r0 []*pb.Reward
	if rf, ok := ret.Get(0).(func(context.Context, *pb.ListRewardsRequest) []*pb.Reward); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pb.Reward)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.ListRewardsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// New provides a mock function with given fields: ctx, orgKey, devKey, t, factor, baseNanoFilReward
func (_m *MockRewardStore) New(ctx context.Context, orgKey string, devKey string, t pb.RewardType, factor int64, baseNanoFilReward int64) (*pb.Reward, error) {
	ret := _m.Called(ctx, orgKey, devKey, t, factor, baseNanoFilReward)

	var r0 *pb.Reward
	if rf, ok := ret.Get(0).(func(context.Context, string, string, pb.RewardType, int64, int64) *pb.Reward); ok {
		r0 = rf(ctx, orgKey, devKey, t, factor, baseNanoFilReward)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Reward)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, pb.RewardType, int64, int64) error); ok {
		r1 = rf(ctx, orgKey, devKey, t, factor, baseNanoFilReward)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TotalNanoFilRewarded provides a mock function with given fields: ctx, orgKey
func (_m *MockRewardStore) TotalNanoFilRewarded(ctx context.Context, orgKey string) (int64, error) {
	ret := _m.Called(ctx, orgKey)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, orgKey)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orgKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
