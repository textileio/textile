// Code generated by mockery 2.7.4. DO NOT EDIT.

package interfaces

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	pb "github.com/textileio/textile/v2/api/sendfild/pb"
)

// MockSendFil is an autogenerated mock type for the SendFil type
type MockSendFil struct {
	mock.Mock
}

// ListTxns provides a mock function with given fields: ctx, opts
func (_m *MockSendFil) ListTxns(ctx context.Context, opts ...func(*pb.ListTxnsRequest)) ([]*pb.Txn, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*pb.Txn
	if rf, ok := ret.Get(0).(func(context.Context, ...func(*pb.ListTxnsRequest)) []*pb.Txn); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pb.Txn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...func(*pb.ListTxnsRequest)) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendFil provides a mock function with given fields: ctx, from, to, amountNanoFil, opts
func (_m *MockSendFil) SendFil(ctx context.Context, from string, to string, amountNanoFil int64, opts ...func(*pb.SendFilRequest)) (*pb.Txn, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, from, to, amountNanoFil)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.Txn
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, ...func(*pb.SendFilRequest)) *pb.Txn); ok {
		r0 = rf(ctx, from, to, amountNanoFil, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Txn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, ...func(*pb.SendFilRequest)) error); ok {
		r1 = rf(ctx, from, to, amountNanoFil, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
